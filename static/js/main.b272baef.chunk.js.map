{"version":3,"sources":["LeftHand.js","RightHand.js","StepConfig.js","Random.js","TimesTen.js","App.js","serviceWorker.js","index.js"],"names":["LeftHand","props","className","type","onClick","changeCount","count","step","RightHand","StepConfig","placeholder","onChange","e","onStepChange","target","value","Random","setRandomCount","randomCount","Math","floor","random","TimesTen","setTimesTen","timesTen","App","useState","setCount","stepCount","newValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAoBeA,MAjBf,SAAkBC,GAKd,OACI,yBAAKC,UAAU,OACX,6CACA,8BAAM,4BAAQC,KAAK,SAASD,UAAU,kBAAkBE,QAN5C,kBAAMH,EAAMI,YAAYJ,EAAMK,MAAQL,EAAMM,QAMlD,QAAN,KACI,4BAAQJ,KAAK,SAASD,UAAU,iBAAiBE,QANxC,kBAAMH,EAAMI,YAAYJ,EAAMK,MAAQL,EAAMM,QAMrD,WCDDC,MATf,SAAmBP,GAEf,OACI,yBAAKC,UAAU,MACVD,EAAMK,QCMJG,MATf,SAAoBR,GAEhB,OACI,yBAAKC,UAAU,MACX,2BAAOQ,YAAY,eAAeC,SAAU,SAACC,GAAD,OAAOX,EAAMY,cAAcD,EAAEE,OAAOC,YCmB7EC,MAvBf,SAAgBf,GAaZ,OACI,yBAAKC,UAAU,MACX,sCACA,4BAAQC,KAAK,SAASD,UAAU,kBAAkBE,QAdvC,WACfH,EAAMgB,eAAehB,EAAMiB,YAAcC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAgB,KAarE,YACD,kCAAQpB,EAAMiB,YAAd,OACC,4BAAQf,KAAK,SAASD,UAAU,iBAAiBE,QAXrC,WAChBH,EAAMgB,eAAehB,EAAMiB,YAAcC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,KAUtE,cCMGC,MAxBf,SAAkBrB,GAYd,OACI,yBAAKC,UAAU,MAEX,wCAEA,4BAAQC,KAAK,SAASD,UAAU,kBAAkBE,QAf1C,WACZH,EAAMsB,YAAYtB,EAAMuB,SAAW,MAc/B,QACA,kCAAQvB,EAAMuB,SAAd,MACA,4BAAQrB,KAAK,SAASD,UAAU,iBAAiBE,QAZxC,WACbH,EAAMsB,YAAYtB,EAAMuB,SAAW,MAW/B,UCkBGC,MAjCf,WAAgB,IAAD,EAEeC,mBAAS,GAFxB,mBAEJpB,EAFI,KAEGqB,EAFH,OAGeD,mBAAS,GAHxB,mBAGJnB,EAHI,KAGEqB,EAHF,OAI2BF,mBAAS,GAJpC,mBAIJR,EAJI,KAISD,EAJT,OAKqBS,mBAAS,GAL9B,mBAKJF,EALI,KAKMD,EALN,KAoBX,OACI,yBAAKrB,UAAU,OACX,kBAAC,EAAD,CAAUG,YAdF,SAACwB,GAAD,OAAcF,EAASE,IAcCvB,MAAOA,EAAOC,KAAMA,IACpD,kBAAC,EAAD,CAAWD,MAAOA,IAClB,kBAAC,EAAD,CAAYO,aAdC,SAACgB,GAAD,OAAcD,EAAUC,MAgBrC,kBAAC,EAAD,CAAQZ,eAAgBA,EAAgBC,YAAaA,IACrD,kBAAC,EAAD,CAAUM,SAAUA,EAAUD,YAAaA,IAC3C,4BAAQpB,KAAK,SAASD,UAAU,gBAAgBE,QAhB1C,WACVmB,EAAY,GACZI,EAAS,GACTJ,EAAY,GACZN,EAAe,KAYX,WCvBQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b272baef.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction LeftHand(props) {\n\n    const clickerPlus = () => props.changeCount(props.count + props.step)\n    const clickerMinus = () => props.changeCount(props.count - props.step)\n\n    return (\n        <div className=\"App\">\n            <h1>Hook useState</h1>\n            <span><button type=\"button\" className=\"btn btn-success\" onClick={clickerPlus}>PLUS</button> </span>\n                <button type=\"button\" className=\"btn btn-danger\" onClick={clickerMinus}>MINUS</button>\n\n\n\n        </div>\n    );\n}\n\nexport default LeftHand;\n","import React from 'react';\n\nfunction RightHand(props) {\n\n    return (\n        <div className=\"h2\">\n            {props.count}\n        </div>\n    );\n}\n\nexport default RightHand;\n","import React from 'react';\nimport './App.css';\n\nfunction StepConfig(props) {\n\n    return (\n        <div className=\"h2\">\n            <input placeholder=\"enter number\" onChange={(e) => props.onStepChange(+e.target.value)}/>\n        </div>\n    );\n}\n\nexport default StepConfig;\n","import React from 'react';\nimport './App.css';\n\nfunction Random(props) {\n\n    const randomPlus = () => {\n        props.setRandomCount(props.randomCount + Math.floor(Math.random() * 10)+ 1)\n\n\n    };\n    const randomMinus = () => {\n        props.setRandomCount(props.randomCount - Math.floor(Math.random() * 10) + 1)\n    };\n\n\n\n    return (\n        <div className=\"h2\">\n            <h1>Random</h1>\n            <button type=\"button\" className=\"btn btn-success\" onClick={randomPlus}>+ Random</button>\n           <span> {props.randomCount}   </span>\n            <button type=\"button\" className=\"btn btn-danger\" onClick={randomMinus}>- Random</button>\n        </div>\n    );\n}\n\nexport default Random;\n","import React from 'react';\nimport './App.css';\n\nfunction TimesTen(props) {\n\n    const tenPlus = () => {\n        props.setTimesTen(props.timesTen + 10)\n\n\n    };\n    const tenMinus = () => {\n        props.setTimesTen(props.timesTen - 10)\n    };\n\n\n    return (\n        <div className=\"h2\">\n\n            <h1>timesTen</h1>\n\n            <button type=\"button\" className=\"btn btn-success\" onClick={tenPlus}>+ 10</button>\n            <span> {props.timesTen}  </span>\n            <button type=\"button\" className=\"btn btn-danger\" onClick={tenMinus}>- 10</button>\n        </div>\n    );\n}\n\nexport default TimesTen;\n","import React, {useState} from 'react';\nimport LeftHand from \"./LeftHand\";\nimport RightHand from \"./RightHand\";\nimport StepConfig from \"./StepConfig\";\nimport Random from \"./Random\";\nimport TimesTen from \"./TimesTen\";\n\nfunction App() {\n\n    const [count, setCount] = useState(0);\n    const [step, stepCount] = useState(0);\n    const [randomCount, setRandomCount] = useState(0)\n    const [timesTen, setTimesTen] = useState(0)\n\n\n    const handler = (newValue) => setCount(newValue);\n\n    const onStepChange = (newValue) => stepCount(newValue);\n\n    const reset = () => {\n        setTimesTen(0);\n        setCount(0);\n        setTimesTen(0);\n        setRandomCount(0);\n    }\n\n\n    return (\n        <div className=\"App\">\n            <LeftHand changeCount={handler} count={count} step={step}/>\n            <RightHand count={count}/>\n            <StepConfig onStepChange={onStepChange} />\n\n            <Random setRandomCount={setRandomCount} randomCount={randomCount}/>\n            <TimesTen timesTen={timesTen} setTimesTen={setTimesTen}/>\n            <button type=\"button\" className=\"btn btn-light\" onClick={reset}>Reset</button>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}